load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_filegroup", "pkg_files", "pkg_mkdirs", "strip_prefix")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_synology//:defs.bzl", "SPK_REQUIRED_SCRIPTS", "images", "info_file", "maintainer", "privilege_config", "protocol_file", "resource_config", "service_config", "usr_local_linker")

info_file(
    name = "info",
    package_name = "netfilter-kmods",
    arch_strings = ["denverton"],
    description = "Provide the kernel modules ipt_REJECT, nf_reject_ipv4, and xt_comment",
    maintainer = "//maintainers:chickenandpork",
    os_min_ver = "7.0-1",  # correct-format=[^\d+(\.\d+){1,2}(-\d+){1,2}$]
    package_version = "1.0.0-1",
)

privilege_config(
    name = "priv",
    # run_as_root isn't working: Synology seems to throw a 313 or 319 error whenever I have any valid binaries in the run-as-root.  Need to optimize it over time.
    #run_as_root= [ "postinst", "preuninst"],
)

usr_local_linker(
    name = "usrlinks",
    bin = ["netfilter-mods"],
)

resource_config(
    name = "rez",
    resources = [":usrlinks"],
)

# Create icon images; yep, the free Tux icon
images(
    name = "icons",
    src = "@tux_icon//file",
)

pkg_files(
    name = "conf",
    srcs = [
        ":priv",
        ":rez",
    ],
    attributes = pkg_attributes(
        mode = "0444",
    ),
    prefix = "conf",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "package",
    srcs = [
    ],
    extension = "tgz",
    package_dir = "/",
    deps = [
        ":package-kconfig",
        ":package-mods",
    ],
)

# models:1819+ activates arch:denverton
alias(
    name = "netfilter-mods",
    actual = select({
        "@rules_synology//arch:denverton": "@prebuilt_denverton_kmods//:mods",
    }),
)

pkg_tar(
    name = "package-kconfig",
    srcs = select({
        "@rules_synology//arch:denverton": ["@prebuilt_denverton_kmods//:kernelconfig"],
    }),
    extension = "tgz",
    package_dir = "/etc",
    stamp = 1,
)

pkg_tar(
    name = "package-mods",
    srcs = [
        ":netfilter-mods",
    ],
    extension = "tgz",
    package_dir = "/lib/modules",
    stamp = 1,
)

[copy_file(
    name = "stub_{}".format(f),
    src = "@rules_synology//synology:stub_script",
    out = f,
) for f in SPK_REQUIRED_SCRIPTS if f not in [
    "postinst",
    "preuninst",
]]

write_file(
    name = "insmod_sss_script",
    out = "start-stop-status",
    content = [
        "#!/bin/sh",
        "",
        """case "$1" in""",
        """    start)""",
        """        exit 0""",
    ] + [
        """        insmod /lib/modules/{}.ko""".format(n)
        for n in [
            "xt_comment",
            "nf_reject_ipv4",
            "ipt_REJECT",
        ]
    ] + [
        """        ;;""",
        """    stop)""",
        """        exit 0""",
    ] + [
        """        rmmod /lib/modules/{}.ko""".format(n)
        for n in [
            "ipt_REJECT",
            "nf_reject_ipv4",
            "xt_comment",
        ]
    ] + [
        """        ;;""",
        """    status)""",
        """        ;;""",
        """esac""",
        "",
        "exit 0",
        "",  # force a newline after the script to simplify diff checks
    ],
    is_executable = True,
    #visibility = ["//visibility:public"],
)

write_file(
    name = "insmod_postinst",
    out = "postinst",
    content = [
        "#!/bin/sh",
        "",
        "exec 2> /tmp/netfilter-spk-inst.log",
        "set -x",
        "",
        """for module in xt_comment nf_reject_ipv4 ipt_REJECT; do""",
        """    ln -fs /var/packages/${SYNOPKG_PKGNAME}/target/lib/modules/${module}.ko /lib/modules""",
        """done""",
        "",
        "exit 0",
        "",  # force a newline after the script to simplify diff checks
    ],
    is_executable = True,
    #visibility = ["//visibility:public"],
)

write_file(
    name = "insmod_preuninst",
    out = "preuninst",
    content = [
        "#!/bin/sh",
        "",
        """for module in xt_comment nf_reject_ipv4 ipt_REJECT; do""",
        """    rm -f /lib/modules/${module}.ko""",
        """done""",
        "",
        "exit 0",
        "",  # force a newline after the script to simplify diff checks
    ],
    is_executable = True,
    #visibility = ["//visibility:public"],
)

pkg_files(
    name = "scripts",
    srcs = [
        ":insmod_postinst",
        ":insmod_preuninst",
        ":insmod_sss_script",
    ] + [":stub_{}".format(f) for f in SPK_REQUIRED_SCRIPTS if f not in [
        "postinst",
        "preuninst",
    ]],
    attributes = pkg_attributes(
        mode = "0755",
    ),
    prefix = "scripts",
)

pkg_tar(
    name = "spk",
    srcs = [
        ":conf",
        ":icons.group",
        ":info",
        ":package",
        ":scripts",
        #"@rules_pkg//pkg:verify_archive_test_main.py.tpl",
    ],
    extension = "tar",
    package_file_name = "netfilter-mods.spk",
    visibility = ["//visibility:public"],
)
